---
title: Salary and Talent Distribution by Madden Team
author: ''
date: '2021-08-12'
slug: salary-and-talent-distribution-by-madden-team
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2021-08-12T14:16:10-04:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---


## Intro

As much as I use R and Data Analysis in my day job, I find that sports games (like Madden) or fantasy sports (football, baseball, etc.) are the best sandbox to learn and practice data analysis skills.  This post will focus on data visualization techniques using Madden data from the Madden 22 EA Sports games release to understand the distribution of talent and skill across teams.

## Package Load

```{r setup, message=FALSE, warning=FALSE}

library(tidyverse)
library(DT)
library(widgetframe)
library(treemapify)
library(testthat)
library(scales)

```

## Data Read

We will read in the raw data with a slight reorganization

```{r message=FALSE}

player_data <- 
  read_csv("players.csv") %>% 
  select(sort(current_vars())) %>% 
  select(team, firstName, lastName, position, playerBestOvr,contractSalary, 
         contractBonus, contractLength, everything())


```


Below you'll see a function I'm creating called "display_table".  I like this little function as it gives people a downloadable data table.  Perhaps it is the financial analyst in me, but I still do a lot of initial data review in excel and so do people I work with, so proving a knit HTML with these data tables is an easy bridge between R and a more excel based audience.

*Note that for the blog I have to export to a widget but in your code you can just use display_table(player_data)


```{r warning=FALSE, message=FALSE}

display_table <- function(x){
  table_output <- 
    DT::datatable(as.data.frame(x),
                  extensions = 'Buttons',
                  
                  options = list(
                    pageLength=5,
                    scrollX = TRUE,
                    dom = 'Bfrtip',
                    buttons = list(
                      list(extend = 'collection',
                           buttons = c('excel', 'csv'),
                           text = 'DOWNLOAD DATA')
                    )
                  )) 
  
  table_output
}

display_table(player_data) %>% widgetframe::frameWidget()

```

## Salary Distribution

Let's start by creating a few cross-walks to help summarize and simplifiy the data.

The first will be grouping positions to a more simplified level

```{r}

group_positions <- 
  list(
    data.frame(group_position = "OL", position = c("RG","LG","C", "LT", "RT")),
    data.frame(group_position = "DL", position = c("LE", "RE", "DT")),
    data.frame(group_position = "LB", position = c("LOLB", "ROLB", "MLB")),
    data.frame(group_position = "DB", position = c("SS", "FS", "CB")),
    data.frame(group_position = "WR", position = c("WR")),
    data.frame(group_position = "TE", position = c("TE")),
    data.frame(group_position = "QB", position = c("QB")),
    data.frame(group_position = "RB", position = c("HB", "FB")),
    data.frame(group_position = "K", position = c("K","P"))
  )

group_positions_df <- bind_rows(group_positions)

##Quick test to make sure you've provided a map for all positions in data

testthat::expect_true(all(unique(player_data$position) %in% group_positions_df$position))

simple_positions <- 
  list(
    data.frame(simple_position = "Offense", group_position = c("OL", "WR", "TE", "RB", "QB") ),
    data.frame(simple_position = "Defense", group_position = c("DL", "LB", "DB")),
    data.frame(simple_position = "Special_Team", group_position = c("K"))
  )

simple_positions_df <- bind_rows(simple_positions)

##Quick test to make sure you've provided a map for all positions in data 

testthat::expect_true(all(unique(group_positions_df$group_position) %in% simple_positions_df$group_position))

player_data_2 <- 
  player_data %>% 
  left_join(group_positions_df, by = "position") %>% 
  left_join(simple_positions_df, by = "group_position")

```

For this first analysis we'll use the sum of contract salary and contract bonus divided by contract length to give a rough estimate of "spent".  We can also use the supplied value of CapHit as potentially a more specific level of expense for this season.


```{r}

player_data_2 %>%
  filter(simple_position != "Special_Team") %>% 
  mutate(avg_cost = (contractSalary+contractBonus) / contractLength) %>% 
  group_by(team, simple_position) %>% 
  summarise(avg_cost = sum(avg_cost))%>%
  ungroup() %>% 
  pivot_wider(names_from = simple_position, values_from = avg_cost) %>% 
  mutate(team = fct_reorder(team, Offense)) %>%
  pivot_longer(cols = -team, names_to = "simple_position", values_to = "avg_cost") %>% 
  ggplot(aes(x = team, y = avg_cost, group=simple_position, fill=simple_position))+
  geom_bar(stat = "identity", position = "dodge") +
  scale_y_continuous(limits = c(0,NA), labels = unit_format(unit = "MM", scale = 1e-6,big.mark = ",")) +
  coord_flip()

```

We could also look at it on a percentage basis and stack the bar chart

```{r}


player_data_2 %>%
  filter(simple_position != "Special_Team") %>% 
  mutate(avg_cost = (contractSalary+contractBonus) / contractLength) %>% 
  group_by(team, simple_position) %>% 
  summarise(avg_cost = sum(avg_cost))%>%
  group_by(team) %>% 
  mutate(avg_cost = avg_cost/sum(avg_cost)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = simple_position, values_from = avg_cost) %>%
  mutate(team = fct_reorder(team, Offense)) %>%
  pivot_longer(cols = -team, names_to = "simple_position", values_to = "avg_cost") %>% 
  ggplot(aes(x = team, y = avg_cost, group=simple_position, fill=simple_position))+
  geom_bar(stat = "identity", position = "stack") +
  scale_y_continuous(limits = c(0,NA), labels = scales::percent) +
  coord_flip()

```


